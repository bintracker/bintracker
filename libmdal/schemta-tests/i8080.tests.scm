(import scheme (chicken base) test schemta)

(define (run-src src)
  (map char->integer (assemble 'i8080 src)))

(test-group
 "Instructions"

 (test "aci" '(#xce #xff) (run-src " aci $ff"))
 (test "adc" '(#x88) (run-src " adc b"))
 (test "add" '(#x80) (run-src " add b"))
 (test "adi" '(#xc6 #xff) (run-src " adi $ff"))
 (test "ana" '(#xa1) (run-src " ana c"))
 (test "ani" '(#xe6 #xff) (run-src " ani $ff"))
 (test "call" '(#xcd #xfe #xff) (run-src " call $fffe"))
 (test "cc" '(#xdc #xfe #xff) (run-src " cc $fffe"))
 (test "cma" '(#x2f) (run-src " cma"))
 (test "cmc" '(#x3f) (run-src " cmc"))
 (test "cmp" '(#xba) (run-src " cmp d"))
 (test "cm" '(#xfc #xfe #xff) (run-src " cm $fffe"))
 (test "cnc" '(#xd4 #xfe #xff) (run-src " cnc $fffe"))
 (test "cnz" '(#xc4 #xfe #xff) (run-src " cnz $fffe"))
 (test "cpi" '(#xfe #xff) (run-src " cpi $ff"))
 (test "cpe" '(#xec #xfe #xff) (run-src " cpe $fffe"))
 (test "cpo" '(#xe4 #xfe #xff) (run-src " cpo $fffe"))
 (test "cp" '(#xf4 #xfe #xff) (run-src " cp $fffe"))
 (test "cz" '(#xcc #xfe #xff) (run-src " cz $fffe"))
 (test "daa" '(#x27) (run-src " daa"))
 (test "dad" '(#x39) (run-src " dad sp"))
 (test "dcr" '(#x35) (run-src " dcr m"))
 (test "dcx" '(#x2b) (run-src " dcx h"))
 (test "di" '(#xf3) (run-src " di"))
 (test "di" '(#xfb) (run-src " ei"))
 (test "hlt" '(#x76) (run-src " hlt"))
 (test "inr" '(#x2c) (run-src " inr l"))
 (test "inx" '(#x13) (run-src " inx d"))
 (test "in" '(#xdb #xff) (run-src " in $ff"))
 (test "jc" '(#xda #xfe #xff) (run-src " jc $fffe"))
 (test "jmp" '(#xc3 #xfe #xff) (run-src " jmp $fffe"))
 (test "jm" '(#xfa #xfe #xff) (run-src " jm $fffe"))
 (test "jnc" '(#xd2 #xfe #xff) (run-src " jnc $fffe"))
 (test "jnz" '(#xc2 #xfe #xff) (run-src " jnz $fffe"))
 (test "jpe" '(#xea #xfe #xff) (run-src " jpe $fffe"))
 (test "jpo" '(#xe2 #xfe #xff) (run-src " jpo $fffe"))
 (test "jp" '(#xf2 #xfe #xff) (run-src " jp $fffe"))
 (test "jz" '(#xca #xfe #xff) (run-src " jz $fffe"))
 (test "ldax" '(#xa #x1a) (run-src " ldax b\n ldax d"))
 (test "lda" '(#x3a #xfe #xff) (run-src " lda $fffe"))
 (test "lhld" '(#x2a #xfe #xff) (run-src " lhld $fffe"))
 (test "lxi" '(#x21 #xfe #xff) (run-src " lxi h,$fffe"))
 (test "mov" '(#x66) (run-src " mov h,m"))
 (test "mvi" '(#x3e #xff) (run-src " mvi a,$ff"))
 (test "nop" '(0) (run-src " nop"))
 (test "ora" '(#xb1) (run-src " ora c"))
 (test "ori" '(#xf6 #xff) (run-src " ori $ff"))
 (test "out" '(#xd3 #xff) (run-src " out $ff"))
 (test "pop" '(#xf1) (run-src " pop psw"))
 (test "push" '(#xe5) (run-src " push h"))
 (test "ral" '(#x17) (run-src " ral"))
 (test "rar" '(#x1f) (run-src " rar"))
 (test "rc" '(#xd8) (run-src " rc"))
 (test "rlc" '(7) (run-src " rlc"))
 (test "ret" '(#xc9) (run-src " ret"))
 (test "rm" '(#xf8) (run-src " rm"))
 (test "rnc" '(#xd0) (run-src " rnc"))
 (test "rnz" '(#xc0) (run-src " rnz"))
 (test "rpe" '(#xe8) (run-src " rpe"))
 (test "rpo" '(#xe0) (run-src " rpo"))
 (test "rp" '(#xf0) (run-src " rp"))
 (test "rrc" '(#x0f) (run-src " rrc"))
 (test "rst" '(#xc7 #xcf #xf7 #xff) (run-src " rst 0\n rst 1\n rst 6\n rst 7"))
 (test "rz" '(#xc8) (run-src " rz"))
 (test "sbb" '(#x9f) (run-src " sbb a"))
 (test "sbi" '(#xde #xff) (run-src " sbi $ff"))
 (test "shld" '(#x22 #xfe #xff) (run-src " shld $fffe"))
 (test "stax" '(2 #x12) (run-src " stax b\n stax d"))
 (test "sta" '(#x32 #xfe #xff) (run-src " sta $fffe"))
 (test "stc" '(#x37) (run-src " stc"))
 (test "sub" '(#x94) (run-src " sub h"))
 (test "sui" '(#xd6 #xff) (run-src " sui $ff"))
 (test "xchg" '(#xeb) (run-src " xchg"))
 (test "xra" '(#xab) (run-src " xra e"))
 (test "xri" '(#xee #xff) (run-src " xri $ff"))
 (test "xthl" '(#xe3) (run-src " xthl")))

(test-exit)
