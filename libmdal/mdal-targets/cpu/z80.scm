(asm-target

 id: z80

 byte-order: little-endian

 registers: ((ixh 4) (ixl 5) (iyh 4) (iyl 5)
	     (af #x30) (bc 0) (de #x10) (hl #x20) (ix #x20) (iy #x20) (sp #x30)
	     (b 0) (c 1) (d 2) (e 3) (h 4) (l 5) (a 7) (i 0) (r 8))

 register-sets: ((r8 (a b c d e h l))
		 (r8-hl (a b c d e))
		 (h-or-l (h l))
 		 (i8 (hx lx hy ly ixh ixl iyh iyl))
		 (ix8 (hx lx ixh ixl))
		 (iy8 (hy ly iyh iyl))
 		 (special8 (i r))
 		 (r16 (bc de hl))
		 (r16+af (af bc de hl))
		 (r16+sp (bc de hl sp))
		 (r16/ix+sp (bc de ix sp))
		 (r16/iy+sp (bc de iy sp))
 		 (i16 (ix iy)))

 addressing-modes: ((index-indirect+d->r
		     (sequence*
		      ((ireg+d (in-parens
				(sequence* ((reg (register 'i16))
					    (_ (is #\+))
					    (displace a-number))
					   (result (list 'list `(quote ,reg)
							 displace)))))
		       (_ (char-seq "->"))
		       (areg (as-string (in (string->char-set "abcdehl")))))
		      (result (append ireg+d
				      (list `(quote ,(string->symbol areg)))))))
		    (index-indirect+d
		     (in-parens (sequence* ((reg (register 'i16))
					    (_ (is #\+))
					    (displace a-number))
					   (result (list 'list `(quote ,reg)
							 displace)))))
		    (memory-indirect (in-parens numeric)))

 flags: ((nz 0) (z 8) (nc #x10) (c #x18)
 	 (po #x20) (pe #x28) (p #x30) (m #x38))

 flag-sets: ((simple (nz z nc c)))

 extra: ((get-prefix (lambda (op)
 		       (if (member #\x (string->list (symbol->string op)))
 			   #xdd #xfd)))
	 (bit-range (bind (as-string (in (string->char-set "01234567")))
			  (lambda (r) (result (* 8 (string->number r)))))))

 instructions:
 ((adc (2 (((is #\a) ((numeric (#xce (lsb %op2)))
		      ((register 'r8) ((+ #x88 (register-value %op2))))
		      ((register 'i8) (((extras 'get-prefix) %op2)
				       (+ #x88 (register-value %op2))))
		      ((char-seq "(hl)") (#x8e))
		      ((address 'index-indirect+d) (((extras 'get-prefix)
						     (car %op2))
						    #x8e (cadr %op2)))))
	   ((char-seq "(hl)") (((register 'r16+sp)
				(#xed (+ #x4a (register-value %op2)))))))))
  (add (2 (((is #\a) ((numeric (#xc6 (lsb %op2)))
  		      ((register 'r8) ((+ #x80 (register-value %op2))))
  		      ((register 'i8) (((extras 'get-prefix) (car %op2))
  				       (+ #x80 (register-value %op2))))
  		      ((char-seq "(hl)") (#x86))
  		      ((address 'index-indirect+d) (((extras 'get-prefix)
  						     (car %op2))
  						    #x86 (cadr %op2)))))
  	   ((char-seq "hl") (((register 'r16+sp)
  			      ((+ #x09 (register-value %op2))))))
  	   ((char-seq "ix") (((register 'r16/ix+sp)
  			      (#xdd (+ #x09 (register-value %op2))))))
  	   ((char-seq "iy") (((register 'r16/iy+sp)
  			      (#xfd (+ #x09 (register-value %op2)))))))))
  (and (1 ((numeric (#xe6 (lsb %op1)))
  	   ((register 'r8) ((+ #xa0 (register-value %op1))))
  	   ((register 'i8) (((extras 'get-prefix) %op1)
  			    (+ #xa0 (register-value %op1))))
  	   ((char-seq "(hl)") (#xa6))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xa6 (lsb (cadr %op1)))))))
  (bit (2 (((extras 'bit-range) (((address 'index-indirect+d)
  				  (((extras 'get-prefix) (car %op2))
  				   #xcb (+ #x46 (* 8 %op1)
  					   (register-value (cadr %op2)))))
  				 ((char-seq "(hl)")
  				  (#xcb (+ #x46 (* 8 %op1))))
  				 ((register 'r8)
  				  (#xcb (+ #x40 (* 8 %op1)
  					   (register-value %op2)))))))))
  (call (1 ((numeric (#xcd (lsb %op1) (msb %op1)))))
  	(2 (((flag 'all) ((numeric ((+ #xc4 (flag-value %op1))
  				    (lsb %op2) (msb %op2))))))))
  (ccf (0 (#x3f)))
  (cp (1 ((numeric (#xfe (lsb %op1)))
  	  ((register 'r8) ((+ #xb8 (register-value %op1))))
  	  ((register 'i8) (((extras 'get-prefix) %op1)
  			   (+ #xb8 (register-value %op1))))
  	  ((char-seq "(hl)") (#xbe))
  	  ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					#xbe (lsb (cadr %op1)))))))
  (cpd (0 (#xed #xa9)))
  (cpdr (0 (#xed #xb9)))
  (cpi (0 (#xed #xa1)))
  (cpir (0 (#xed #xb1)))
  (cpl (0 (#x2f)))
  (daa (0 (#x27)))
  (dec (1 (((register 'r8) ((+ #x05 (* 8 (register-value %op1)))))
  	   ((register 'i8) (((extras 'get-prefix) %op1)
  			    (+ #x05 (* 8 (register-value %op1)))))
  	   ((register 'r16+sp) ((+ #x0b (register-value %op1))))
  	   ((register 'i16) (((extras 'get-prefix) %op1) #x2b))
  	   ((char-seq "(hl)") (#x35))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #x35 (cadr %op1))))))
  (di (0 (#xf3)))
  (djnz (1 (((signed-number-range 8) (#x10 (lsb %op1)))
  	    ((any-of symbol a-sexp-directive)
	     (#x10 (lsb (- %op1 (+ 2 current-origin))))))))
  (ei (0 (#xfb)))
  (ex (2 (((char-seq "af") (((char-seq "af'") (#x08))))
  	  ((char-seq "de") (((char-seq "hl") (#xeb))))
  	  ((char-seq "(sp)") (((char-seq "hl") (#xe3))
  			      ((register 'i16) (((extras 'get-prefix) %op2)
  						#xe3)))))))
  (exa (0 (#x08)))
  (exx (0 (#xd9)))
  (halt (0 (#x76)))
  (im (1 (((is #\0) (#xed #x46))
  	  ((is #\1) (#xed #x56))
  	  ((is #\2) (#xed #x5e)))))
  (in (1 (((char-seq "(c)") (#xed #x70))))
      (2 (((char-seq "a") (((char-seq "(c)") (#xed #x78))
  			   ((address 'memory-indirect) (#xdb (lsb %op2)))))
  	  ((char-seq "f") (((char-seq "(c)") (#xed #x70))))
  	  ((register 'r8) (((char-seq "(c)")
  			    (#xed (+ #x40 (* 8 (register-value %op1))))))))))
  (inc (1 (((register 'r8) ((+ #x04 (* 8 (register-value %op1)))))
  	   ((register 'i8) (((extras 'get-prefix) %op1)
  			    (+ #x04 (* 8 (register-value %op1)))))
  	   ((register 'r16+sp) ((+ #x03 (register-value %op1))))
  	   ((register 'i16) (((extras 'get-prefix) %op1) #x23))
  	   ((char-seq "(hl)") (#x34))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #x34 (cadr %op1))))))
  (ind (0 (#xed #xaa)))
  (indr (0 (#xed #xba)))
  (ini (0 (#xed #xa2)))
  (inir (0 (#xed #xb2)))
  (jp (1 ((numeric (#xc3 (lsb %op1) (msb %op1)))
  	  ((char-seq "(hl)") (#xe9))
  	  ((char-seq "(ix)") (#xdd #xe9))
  	  ((char-seq "(iy)") (#xfd #xe9))))
      (2 (((flag 'all) ((numeric ((+ #xc2 (flag-value %op1))
  				  (lsb %op2) (msb %op2))))))))
  (jr (1 (((signed-number-range 8) (#x18 (lsb %op1)))
  	  (numeric (#x18 (lsb (- %op1 (+ 2 current-origin)))))))
      (2 (((flag 'simple)
  	   ((a-number ((+ #x20 (flag-value %op1))
  		       (lsb %op2)))
  	    (numeric ((+ #x20 (flag-value %op1))
  		      (lsb (- %op2 (+ 2 current-origin))))))))))
  (ld (2 (((is #\a) (((register 'r8) ((+ #x78 (register-value %op2))))
  		     ((register 'i8) (((extras 'get-prefix) %op2)
  				      (+ #x78 (register-value %op2))))
  		     ((register 'special8) (#xed (+ #x57
  						    (register-value %op2))))
  		     ((char-seq "(bc)") (#x0a))
  		     ((char-seq "(de)") (#x1a))
  		     ((char-seq "(hl)") (#x7e))
  		     ((address 'memory-indirect) (#x3a (lsb %op2) (msb %op2)))
  		     ((address 'index-indirect+d)
  		      (((extras 'get-prefix) (car %op2)) #x7e (cadr %op2)))
		     (numeric (#x3e (lsb %op2)))))
  	  ((register 'r8-hl) ((numeric ((+ #x06 (* 8 (register-value %op1)))
  	  				(lsb %op2)))
  	  		      ((register 'r8)
  	  		       ((+ #x40 (* 8 (register-value %op1))
  	  			   (register-value %op2))))
  	  		      ((register 'i8) (((extras 'get-prefix) %op2)
  	  				       (+ #x40
						  (* 8 (register-value %op1))
  	  					  (register-value %op2))))
  	  		      ((char-seq "(hl)")
  	  		       ((+ #x46 (* 8 (register-value %op1)))))
  	  		      ((address 'index-indirect+d)
			       (((extras 'get-prefix) (car %op2))
				(+ #x46 (* 8 (register-value %op1)))
				(lsb (cadr %op2))))))
  	  ((register 'h-or-l) ((numeric ((+ #x06 (* 8 (register-value %op1)))
  	  				 (lsb %op2)))
  	  		       ((register 'r8)
  	  			((+ #x40 (* 8 (register-value %op1))
  	  			    (register-value %op2))))
  	  		       ((char-seq "(hl)")
  	  			((+ #x46 (* 8 (register-value %op1)))))
  	  		       ((address 'index-indirect+d)
				(((extras 'get-prefix) (car %op2))
				 (+ #x46 (* 8 (register-value %op1)))
				 (lsb (cadr %op2))))))
  	  ((register 'ix8) (((register 'r8-hl)
  	  		     (#xdd (+ #x40 (* 8 (register-value %op1))
  	  			      (register-value %op2))))
  	  		    ((register 'ix8)
  	  		     (#xdd (+ #x40 (* 8 (register-value %op1))
  	  			      (register-value %op2))))
  	  		    (numeric
  	  		     (#xdd (+ #x06 (* 8 (register-value %op1)))
  	  			   (lsb %op2)))))
  	  ((register 'iy8) (((register 'r8-hl)
  	  		     (#xfd (+ #x40 (* 8 (register-value %op1))
  	  			      (register-value %op2))))
  	  		    ((register 'ix8)
  	  		     (#xfd (+ #x40 (* 8 (register-value %op1))
  	  			      (register-value %op2))))
  	  		    (numeric
  	  		     (#xfd (+ #x06 (* 8 (register-value %op1)))
  	  			   (lsb %op2)))))
  	  ((register 'special8) (((char-seq "a")
  	  			  (#xed (+ #x47 (register-value %op1))))))
	  ((char-seq "hl") ((numeric (#x21 (lsb %op2) (msb %op2)))
			    ((address 'memory-indirect)
			     (#x2a (lsb %op2) (msb %op2)))))
  	  ((char-seq "sp") (((char-seq "hl") (#xf9))
  	  		    ((register 'i16) (((extras 'get-prefix) %op2)
  	  				      #xf9))
  	  		    (numeric (#x31 (lsb %op2) (msb %op2)))))
  	  ((register 'r16+sp) ((numeric ((+ #x01 (register-value %op1))
					 (lsb %op2) (msb %op2)))
  	  		       ((address 'memory-indirect)
				(#xed (+ #x4b (register-value %op1))
				      (lsb %op2) (msb %op2)))))
  	  ((register 'i16) ((numeric (((extras 'get-prefix) %op1)
				      #x21 (lsb %op2) (msb %op2)))
  	  		    ((address 'memory-indirect)
			     (((extras 'get-prefix) %op1)
			      #x2a (lsb %op2) (msb %op2)))))
  	  ((char-seq "(bc)") (((is #\a) (#x02))))
  	  ((char-seq "(de)") (((is #\a) (#x12))))
  	  ((char-seq "(hl)") (((register 'r8) ((+ #x70
  	  					  (register-value %op2))))
  	  		      (numeric (#x36 (lsb %op2)))))
  	  ((address 'memory-indirect)
  	   (((is #\a) (#x32 (lsb %op1) (msb %op1)))
  	    ((char-seq "hl") (#x22 (lsb %op1) (msb %op1)))
  	    ((register 'r16+sp) (#xed (+ #x43 (register-value %op2))
  	  			      (lsb %op1) (msb %op1)))))
  	  ((address 'index-indirect+d)
  	   (((register 'r8) (((extras 'get-prefix) (car %op1))
  	  		     (+ #x70 (register-value %op2))
  	  		     (lsb (cadr %op1))))
  	    ;; TODO verify this composition
  	    (numeric (((extras 'get-prefix) (car %op1))
  	  	      #x35 (lsb (cadr %op1)) (lsb %op2))))))))
  (ldd (0 (#xed #xa8)))
  (lddr (0 (#xed #xb8)))
  (ldi (0 (#xed #xa0)))
  (ldir (0 (#xed #xb0)))
  (neg (0 (#xed #x44)))
  (nop (0 (#x00)))
  (or (1 ((numeric (#xf6 (lsb %op1)))
  	  ((register 'r8) ((+ #xb0 (register-value %op1))))
  	  ((register 'i8) (((extras 'get-prefix) %op1)
  			   (+ #xb0 (register-value %op1))))
  	  ((char-seq "(hl)") (#xb6))
  	  ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					#xb6 (lsb (cadr %op1)))))))
  (otdr (0 (#xed #xbb)))
  (otir (0 (#xed #xb3)))
  (out (2 (((char-seq "(c)") (((register 'r8)
  			       (#xed (+ #x41 (* 8 (register-value %op2)))))
  			      ((is #\0) (#xed #x71))))
  	   ((address 'memory-indirect) (((is #\a) (#xd3 (lsb %op1))))))))
  (outd (0 (#xed #xab)))
  (outi (0 (#xed #xa3)))
  (pop (1 (((register 'r16+af) ((+ #xc1 (register-value %op1))))
  	   ((register 'i16) (((extras 'get-prefix) %op1) #xe1)))))
  (push (1 (((register 'r16+af) ((+ #xc5 (register-value %op1))))
  	    ((register 'i16) (((extras 'get-prefix) %op1) #xe5)))))
  (res (2 (((extras 'bit-range)
  	    (((register 'r8) (#xcb (+ #x80 (* 8 %op1) (register-value %op2))))
  	     ((char-seq "(hl)") (#xcb (+ #x86 (* 8 %op1))))
  	     ((address 'index-indirect+d) (((extras 'get-prefix) (car %op2))
  					   #xcb (cadr %op2) (+ #x86
							       (* 8 %op1))))
  	     ((address 'index-indirect+d->r)
  	      (((extras 'get-prefix) (car %op2))
  	       #xcb (cadr %op2)
  	       (+ #x80 (* 8 %op1) (register-value (caddr %op2)))))))))
       (3 (((extras 'bit-range)
  	    (((address 'index-indirect+d)
  	      (((register 'r8) (((extras 'get-prefix) (car %op2))
  				#xcb (cadr %op2)
  				(+ #x80
				   (* 8 %op1)
				   (register-value %op3)))))))))))
  (ret (0 (#xc9))
       (1 (((flag 'all) ((+ #xc0 (flag-value %op1)))))))
  (reti (0 (#xed #x4d)))
  (retn (0 (#xed #x45)))
  (rl (1 (((register 'r8) (#xcb (+ #x10 (register-value %op1))))
  	  ((char-seq "(hl)") (#xcb #x16))
  	  ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					#xcb (cadr %op1) #x16))
	  ((address 'index-indirect+d->r)
	   (((extras 'get-prefix) (car %op1))
	    #xcb
	    (cadr %op1)
	    (+ #x10 (register-value (caddr %op1))))))))
  (rla (0 (#x17)))
  (rlc (1 (((register 'r8) (#xcb (register-value %op1)))
  	   ((char-seq "(hl)") (#xcb #x06))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xcb (cadr %op1) #x06))
	   ((address 'index-indirect+d->r)
	    (((extras 'get-prefix) (car %op1))
	     #xcb
	     (cadr %op1)
	     (register-value (caddr %op1)))))))
  (rlca (0 (#x07)))
  (rld (0 (#xed #x6f)))
  (rr (1 (((register 'r8) (#xcb (+ #x18 (register-value %op1))))
  	  ((char-seq "(hl)") (#xcb #x1e))
  	  ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					#xcb (cadr %op1) #x1e))
	  ((address 'index-indirect+d->r)
	   (((extras 'get-prefix) (car %op1))
	    #xcb
	    (cadr %op1)
	    (+ #x18 (register-value (caddr %op1))))))))
  (rra (0 (#x1f)))
  (rrc (1 (((register 'r8) (#xcb (+ #x08 (register-value %op1))))
  	   ((char-seq "(hl)") (#xcb #x0e))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xcb #x0e))
	   ((address 'index-indirect+d->r)
	    (((extras 'get-prefix) (car %op1))
	     #xcb
	     (cadr %op1)
	     (+ #x08 (register-value (caddr %op1))))))))
  (rrca (0 (#x0f)))
  (rrd (0 (#xed #x67)))
  ;; TODO abstract this so we can accept different number formats
  (rst (1 (((is #\0) (#xc7))
  	   ((is #\8) (#xcf))
  	   ((char-seq "10") (#xd7))
  	   ((char-seq "18") (#xdf))
  	   ((char-seq "20") (#xe7))
  	   ((char-seq "28") (#xef))
  	   ((char-seq "30") (#xf7))
  	   ((char-seq "38") (#xff)))))
  (sbc (2 (((is #\a) ((numeric (#xde (lsb %op2)))
  		      ((register 'r8) ((+ #x98 (register-value %op2))))
  		      ((register 'i8) (((extras 'get-prefix) %op2)
  				       (+ #x98 (register-value %op2))))
  		      ((char-seq "(hl)") (#x9e))
  		      ((address 'index-indirect+d) (((extras 'get-prefix)
  						     (car %op2))
  						    #x9e (cadr %op2)))))
  	   ((char-seq "hl") (((register 'r16+sp)
  			      (#xed (+ #x42 (register-value %op2)))))))))
  (scf (0 (#x37)))
  (set (2 (((extras 'bit-range)
  	    (((register 'r8) (#xcb (+ #xc0 (* 8 %op1) (register-value %op2))))
  	     ((char-seq "(hl)") (#xcb (+ #xc6 (* 8 %op1))))
  	     ((address 'index-indirect+d) (((extras 'get-prefix) (car %op2))
  					   #xcb (cadr %op2) (+ #xc6
							       (* 8 %op1))))
  	     ((address 'index-indirect+d->r)
  	      (((extras 'get-prefix) (car %op2))
  	       #xcb (cadr %op2) (+ #xc0 (* 8 %op1)
  				   (register-value (caddr %op2)))))))))
       (3 (((extras 'bit-range)
  	    (((address 'index-indirect+d)
  	      (((register 'r8) (((extras 'get-prefix) (car %op2))
  				#xcb (cadr %op2)
  				(+ #xc0
				   (* 8 %op1)
				   (register-value %op3)))))))))))
  (sla (1 (((register 'r8) (#xcb (+ #x20 (register-value %op1))))
  	   ((char-seq "(hl)") (#xcb #x26))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xcb (cadr %op1) #x26))
  	   ((address 'index-indirect+d->r)
	    (((extras 'get-prefix) (car %op1))
	     #xcb
	     (cadr %op1)
	     (+ #x20 (register-value (caddr %op1))))))))
  (sra (1 (((register 'r8) (#xcb (+ #x28 (register-value %op1))))
  	   ((char-seq "(hl)") (#xcb #x2e))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xcb (cadr %op1) #x2e))
	   ((address 'index-indirect+d->r)
	    (((extras 'get-prefix) (car %op1))
	     #xcb
	     (cadr %op1)
	     (+ #x28 (register-value (caddr %op1))))))))
  (sll (1 (((register 'r8) (#xcb (+ #x30 (register-value %op1))))
  	   ((char-seq "(hl)") (#xcb #x36))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xcb (cadr %op1) #x36))
	   ((address 'index-indirect+d->r)
	    (((extras 'get-prefix) (car %op1))
	     #xcb
	     (cadr %op1)
	     (+ #x30 (register-value (caddr %op1))))))))
  (sls (1 (((register 'r8) (#xcb (+ #x30 (register-value %op1))))
  	   ((char-seq "(hl)") (#xcb #x36))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xcb (cadr %op1) #x36))
	   ((address 'index-indirect+d->r)
	    (((extras 'get-prefix) (car %op1))
	     #xcb
	     (cadr %op1)
	     (+ #x30 (register-value (caddr %op1))))))))
  (srl (1 (((register 'r8) (#xcb (+ #x38 (register-value %op1))))
  	   ((char-seq "(hl)") (#xcb #x3e))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xcb (cadr %op1) #x3e))
	   ((address 'index-indirect+d->r)
	    (((extras 'get-prefix) (car %op1))
	     #xcb
	     (cadr %op1)
	     (+ #x38 (register-value (caddr %op1))))))))
  (sub (1 (((register 'r8) ((+ #x90 (register-value %op1))))
  	   ((register 'i8) (((extras 'get-prefix) %op1)
  			    (+ #x90 (register-value %op1))))
  	   ((char-seq "(hl)") (#x96))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
					 #x96 (cadr %op1)))
  	   (numeric (#xd6 (lsb %op1))))))
  (xor (1 ((numeric (#xee (lsb %op1)))
  	   ((register 'r8) ((+ #xa8 (register-value %op1))))
  	   ((register 'i8) (((extras 'get-prefix) %op1)
  			    (+ #xa8 (register-value %op1))))
  	   ((char-seq "(hl)") (#xae))
  	   ((address 'index-indirect+d) (((extras 'get-prefix) (car %op1))
  					 #xae (lsb (cadr %op1)))))))
  ))
